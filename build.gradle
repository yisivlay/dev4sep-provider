/**
 * Copyright 2024 DEV4Sep
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.6'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.graalvm.buildtools.native' version '0.9.28'
}

group = 'com.dev4sep'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
	providedCompile
	compile() {
		exclude module: 'hibernate-entitymanager'
		exclude module: 'hibernate-validator'
	}
}

apply from: 'dependencies.gradle'

bootJar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {
		attributes('Main-Class': 'org.springframework.boot.loader.launch.PropertiesLauncher', 'Implementation-Title': 'Apache Fineract', 'Implementation-Version': project.version)
	}
	archiveClassifier = ''
}

bootRun {
	jvmArgs = [
			"-Dspring.output.ansi.enabled=ALWAYS"
	]

	dependencies {
		implementation 'org.mariadb.jdbc:mariadb-java-client'
	}
}

springBoot {
	mainClass = 'com.dev4sep.base.ServerApplication'
}

// Configuration for database tasks
import groovy.sql.Sql

project.ext.mariaDBUser = 'root'
project.ext.mariaDBPassword = 'admin@2024!'

configurations {
	driver
}
dependencies {
	driver 'org.mariadb.jdbc:mariadb-java-client'
}

URLClassLoader loader = GroovyObject.class.classLoader as URLClassLoader
configurations.driver.each { File file -> loader.addURL(file.toURI().toURL()) }

tasks.register('createDB') {
	description = "Creates the MariaDB Database. Needs database name to be passed (like: -PdbName=someDBname)"
	doLast {
		def sql = Sql.newInstance('jdbc:mariadb://localhost:3305/', mariaDBUser, mariaDBPassword, 'org.mariadb.jdbc.Driver')
		sql.execute('CREATE DATABASE ' + "`$dbName` CHARACTER SET utf8mb4")
	}
}

tasks.register('dropDB') {
	description = "Drops the specified MariaDB database. The database name has to be passed (like: -PdbName=someDBname)"
	doLast {
		def sql = Sql.newInstance('jdbc:mariadb://localhost:3305/', mariaDBUser, mariaDBPassword, 'org.mariadb.jdbc.Driver')
		sql.execute('DROP DATABASE ' + "`$dbName`")
	}
}

tasks.register('setBlankPassword') {
	doLast {
		def sql = Sql.newInstance('jdbc:mariadb://localhost:3305/', mariaDBUser, mariaDBPassword, 'org.mariadb.jdbc.Driver')
		sql.execute('USE `dev4sep-tenants`')
		sql.execute('UPDATE dev4sep-tenants.tenants SET schema_server = \'localhost\', schema_server_port = \'3305\', schema_username = \'root\', schema_password = \'admin@2024!\' WHERE id=1;')
	}
}
// End configuration for Database tasks

tasks.named('test') {
	useJUnitPlatform()
}
