plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.6'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.graalvm.buildtools.native' version '0.9.28'
}

group = 'com.dev4sep'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.batch:spring-batch-integration'
	implementation 'org.glassfish.jersey.media:jersey-media-multipart'
	implementation('org.springframework.boot:spring-boot-starter-jersey') {
		exclude group: 'org.glassfish.hk2.external', module: 'aopalliance-repackaged'
		exclude group: 'org.glassfish.hk2', module: 'hk2-runlevel'
		exclude group: 'org.hibernate.validator', module: 'hibernate-validator'
		exclude group: 'jakarta.activation', module: 'jakarta.activation-api'
	}
	implementation 'org.apache.commons:commons-lang3'
	implementation 'org.jetbrains:annotations:23.0.0'
	implementation 'org.eclipse.persistence:eclipselink:4.0.3'
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.4.0'
	implementation 'org.liquibase:liquibase-core:4.28.0'
	implementation 'com.google.guava:guava:10.0.1'
	implementation 'com.github.spotbugs:spotbugs-annotations'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

bootJar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {
		attributes('Main-Class': 'org.springframework.boot.loader.launch.PropertiesLauncher', 'Implementation-Title': 'Apache Fineract', 'Implementation-Version': project.version)
	}
	archiveClassifier = ''
}

// Configuration for database tasks
import groovy.sql.Sql

project.ext.mariaDBUser = 'root'
project.ext.mariaDBPassword = 'admin@2024!'

configurations {
	driver
}
dependencies {
	driver 'org.mariadb.jdbc:mariadb-java-client'
}

URLClassLoader loader = GroovyObject.class.classLoader as URLClassLoader
configurations.driver.each { File file -> loader.addURL(file.toURI().toURL()) }

tasks.register('createDB') {
	description = "Creates the MariaDB Database. Needs database name to be passed (like: -PdbName=someDBname)"
	doLast {
		def sql = Sql.newInstance('jdbc:mariadb://localhost:3305/', mariaDBUser, mariaDBPassword, 'org.mariadb.jdbc.Driver')
		sql.execute('CREATE DATABASE ' + "`$dbName` CHARACTER SET utf8mb4")
	}
}

tasks.register('dropDB') {
	description = "Drops the specified MariaDB database. The database name has to be passed (like: -PdbName=someDBname)"
	doLast {
		def sql = Sql.newInstance('jdbc:mariadb://localhost:3305/', mariaDBUser, mariaDBPassword, 'org.mariadb.jdbc.Driver')
		sql.execute('DROP DATABASE ' + "`$dbName`")
	}
}
// End configuration for Database tasks

tasks.named('test') {
	useJUnitPlatform()
}
