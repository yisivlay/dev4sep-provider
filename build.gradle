/**
 * Copyright 2024 DEV4Sep
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
	ext {
		springBootVersion = '3.3.1'
	}
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath(
				"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}",
				"gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.16.1",
				"com.github.jk1:gradle-license-report:2.8",
				"io.swagger.core.v3:swagger-gradle-plugin:2.2.22"
		)
	}
}

apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'license'
apply plugin: 'com.github.jk1.dependency-license-report'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'io.swagger.core.v3.swagger-gradle-plugin'

group = 'com.dev4sep'

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
	providedCompile
	compile() {
		exclude module: 'hibernate-entitymanager'
		exclude module: 'hibernate-validator'
	}
	runtime
}

apply from: 'dependencies.gradle'

bootJar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {
		attributes('Main-Class': 'org.springframework.boot.loader.launch.PropertiesLauncher', 'Implementation-Title': 'DEV4Sep', 'Implementation-Version': project.version)
	}
	enabled = true
	archiveFileName = 'dev4sep-provider.jar'
	archiveClassifier = ''
}

// bootWar build will execute with bootWar task
bootWar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {
		attributes('Main-Class': 'org.springframework.boot.loader.launch.PropertiesLauncher', 'Implementation-Title': 'DEV4Sep', 'Implementation-Version': project.version)
	}
	enabled = true
	archiveFileName = 'dev4sep-provider.war'
	archiveClassifier = ''
}

// assemble build will execute with war task
war {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	archiveFileName = 'dev4sep-provider.war'
	archiveClassifier = ''
}

bootRun {
	jvmArgs = [
			"-Dspring.output.ansi.enabled=ALWAYS"
	]

	dependencies {
		implementation 'org.mariadb.jdbc:mariadb-java-client'
	}
}

springBoot {
	mainClass = 'com.dev4sep.base.ServerApplication'
}

// Configuration for database tasks

import groovy.sql.Sql

project.ext.mariaDBUser = 'root'
project.ext.mariaDBPassword = 'admin@2024!'

configurations {
	driver
}
dependencies {
	driver 'org.mariadb.jdbc:mariadb-java-client'
}

URLClassLoader loader = GroovyObject.class.classLoader as URLClassLoader
configurations.driver.each { File file -> loader.addURL(file.toURI().toURL()) }

tasks.register('createDB') {
	description = "Creates the MariaDB Database. Needs database name to be passed (like: -PdbName=someDBname)"
	doLast {
		def sql = Sql.newInstance('jdbc:mariadb://localhost:3307/', mariaDBUser, mariaDBPassword, 'org.mariadb.jdbc.Driver')
		sql.execute('CREATE DATABASE ' + "`$dbName` CHARACTER SET utf8mb4")
	}
}

tasks.register('dropDB') {
	description = "Drops the specified MariaDB database. The database name has to be passed (like: -PdbName=someDBname)"
	doLast {
		def sql = Sql.newInstance('jdbc:mariadb://localhost:3307/', mariaDBUser, mariaDBPassword, 'org.mariadb.jdbc.Driver')
		sql.execute('DROP DATABASE ' + "`$dbName`")
	}
}

tasks.register('setBlankPassword') {
	doLast {
		def sql = Sql.newInstance('jdbc:mariadb://localhost:3307/', mariaDBUser, mariaDBPassword, 'org.mariadb.jdbc.Driver')
		sql.execute('USE `dev4sep-tenants`')
		sql.execute('UPDATE `dev4sep-tenants`.tenants SET schema_server = \'localhost\', schema_server_port = \'3307\', schema_username = \'root\', schema_password = \'admin@2024!\' WHERE id=1;')
	}
}
// End configuration for Database tasks

tasks.register('ServerApplication') {
	def mainClass = 'com.dev4sep.base.ServerApplication'
	rootProject.file(mainClass)
}

// Manage License
license {
	header rootProject.file("LICENSE_HEADER")
	excludes([
			"**/gradlew*",
			"**/*.html",
			"**/*.mustache",
			"**/package-info.java",
			"**/keystore.p12",
			"**/keystore.jks",
			"**/*Tests.java",
			"**/banner.txt",
			"gradlew*"
	])
	licenseReport {
		outputDir = "$projectDir/licenses"
	}
	strictCheck true
}

downloadLicenses {
	ext.apacheTwo = license('Apache License, Version 2.0', 'http://opensource.org/licenses/Apache-2.0')

	includeProjectDependencies = true
	licenses = [
			(group('com.dev4sep.base'))         : license('DEV4Sep License'),
			'org.apache.james:apache-mime4j:0.6': apacheTwo
	]

	aliases = [
			(apacheTwo): [
					'The Apache Software License, Version 2.0', 'Apache 2', 'Apache License Version 2.0', 'Apache License, Version 2.0', 'Apache License 2.0', license('Apache License', 'http://www.apache.org/licenses/LICENSE-2.0')]
	]

	dependencyConfiguration = 'compile'
}

licenseFormatMain.header = file('LICENSE_HEADER')
licenseMain.dependsOn ServerApplication

// End Manage License

tasks.named('test') {
	useJUnitPlatform()
}
